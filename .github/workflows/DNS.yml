name: DNS
on:
  push:
    branches:
      - 'dev'
    paths:
      - 'dnsapi/*.sh'
      - '.github/workflows/DNS.yml'
  pull_request:
    branches:
      - 'dev'
    paths:
      - 'dnsapi/*.sh'
      - '.github/workflows/DNS.yml'


jobs:
  CheckToken:
    runs-on: ubuntu-latest
    outputs:
      hasToken: ${{ steps.step_one.outputs.hasToken }}
    steps:
      - name: Set the value
        id: step_one
        run: |
          if [ "${{secrets.TOKENNAME1}}" ] ; then
            echo "::set-output name=hasToken::true"
          else
            echo "::set-output name=hasToken::false"
          fi
      - name: Check the value
        run: echo ${{ steps.step_one.outputs.hasToken }}

  Fail:
    runs-on: ubuntu-latest
    needs: CheckToken
    if: "contains(needs.CheckToken.outputs.hasToken, 'false')"
    steps:
    - name: "Read this:   https://github.com/acmesh-official/acme.sh/wiki/DNS-API-Test"
      run: |
        echo "Plese see this page to fix the error: https://github.com/acmesh-official/acme.sh/wiki/DNS-API-Test"
    - name: Fail
      if: "github.actor != 'Neilpang'"
      run: false

  Docker:
    runs-on: ubuntu-latest
    needs: CheckToken
    if: "contains(needs.CheckToken.outputs.hasToken, 'true')"
    env:
      TEST_DNS : ${{ secrets.TEST_DNS }}
      TestingDomain: ${{ secrets.TESTINGDOMAIN }}
      TEST_DNS_NO_WILDCARD: ${{ secrets.TEST_DNS_NO_WILDCARD }}
      TEST_DNS_SLEEP: ${{ secrets.TEST_DNS_SLEEP }}
      CASE: le_test_dnsapi
      TEST_LOCAL: 1
      DEBUG: 1
    steps:
    - uses: actions/checkout@v2
    - name: Clone acmetest
      run: cd .. && git clone https://github.com/acmesh-official/acmetest.git  && cp -r acme.sh acmetest/
    - name: Set env file
      run: |
        cd ../acmetest 
        if [ "${{ secrets.TOKENNAME1}}" ] ; then
          echo "${{ secrets.TOKENNAME1}}=${{ secrets.TOKENVALUE1}}" >> env.list
        fi
        if [ "${{ secrets.TOKENNAME2}}" ] ; then
          echo "${{ secrets.TOKENNAME2}}=${{ secrets.TOKENVALUE2}}" >> env.list
        fi
        if [ "${{ secrets.TOKENNAME3}}" ] ; then
          echo "${{ secrets.TOKENNAME3}}=${{ secrets.TOKENVALUE3}}" >> env.list
        fi
        if [ "${{ secrets.TOKENNAME4}}" ] ; then
          echo "${{ secrets.TOKENNAME4}}=${{ secrets.TOKENVALUE4}}" >> env.list
        fi
        if [ "${{ secrets.TOKENNAME5}}" ] ; then
          echo "${{ secrets.TOKENNAME5}}=${{ secrets.TOKENVALUE5}}" >> env.list
        fi
        echo "TEST_DNS_NO_WILDCARD" >> env.list 
        echo "TEST_DNS_SLEEP" >> env.list
    - name: Run acmetest
      run: cd ../acmetest && ./rundocker.sh  testall

  MacOS:
    runs-on: macos-latest
    needs: Docker
    env:
      TEST_DNS : ${{ secrets.TEST_DNS }}
      TestingDomain: ${{ secrets.TESTINGDOMAIN }}
      TEST_DNS_NO_WILDCARD: ${{ secrets.TEST_DNS_NO_WILDCARD }}
      TEST_DNS_SLEEP: ${{ secrets.TEST_DNS_SLEEP }}
      CASE: le_test_dnsapi
      TEST_LOCAL: 1
      DEBUG: 1
    steps:
    - uses: actions/checkout@v2
    - name: Install tools
      run:  brew update && brew install socat;
    - name: Clone acmetest
      run: cd .. && git clone https://github.com/acmesh-official/acmetest.git  && cp -r acme.sh acmetest/
    - name: Run acmetest
      run: |
        if [ "${{ secrets.TOKENNAME1}}" ] ; then
          export ${{ secrets.TOKENNAME1}}=${{ secrets.TOKENVALUE1}}
        fi
        if [ "${{ secrets.TOKENNAME2}}" ] ; then
          export ${{ secrets.TOKENNAME2}}=${{ secrets.TOKENVALUE2}}
        fi
        if [ "${{ secrets.TOKENNAME3}}" ] ; then
          export ${{ secrets.TOKENNAME3}}=${{ secrets.TOKENVALUE3}}
        fi
        if [ "${{ secrets.TOKENNAME4}}" ] ; then
          export ${{ secrets.TOKENNAME4}}=${{ secrets.TOKENVALUE4}}
        fi
        if [ "${{ secrets.TOKENNAME5}}" ] ; then
          export ${{ secrets.TOKENNAME5}}=${{ secrets.TOKENVALUE5}}
        fi
        cd ../acmetest
        ./letest.sh

  Windows:
    runs-on: windows-latest
    needs: MacOS
    env:
      TEST_DNS : ${{ secrets.TEST_DNS }}
      TestingDomain: ${{ secrets.TESTINGDOMAIN }}
      TEST_DNS_NO_WILDCARD: ${{ secrets.TEST_DNS_NO_WILDCARD }}
      TEST_DNS_SLEEP: ${{ secrets.TEST_DNS_SLEEP }}
      CASE: le_test_dnsapi
      TEST_LOCAL: 1
      DEBUG: 1
    steps:
    - name: Set git to use LF
      run: |
          git config --global core.autocrlf false
    - uses: actions/checkout@v2
    - name: Install cygwin base packages with chocolatey
      run: |
          choco config get cacheLocation
          choco install --no-progress cygwin
      shell: cmd
    - name: Install cygwin additional packages
      run: |
          C:\tools\cygwin\cygwinsetup.exe -qgnNdO -R C:/tools/cygwin -s http://mirrors.kernel.org/sourceware/cygwin/ -P socat,curl,cron,unzip,git
      shell: cmd
    - name: Set ENV
      run: |
          echo '::set-env name=PATH::C:\tools\cygwin\bin;C:\tools\cygwin\usr\bin'
    - name: Clone acmetest
      run: cd .. && git clone https://github.com/acmesh-official/acmetest.git  && cp -r acme.sh acmetest/
    - name: Run acmetest
      shell: bash
      run: |
        if [ "${{ secrets.TOKENNAME1}}" ] ; then
          export ${{ secrets.TOKENNAME1}}=${{ secrets.TOKENVALUE1}}
        fi
        if [ "${{ secrets.TOKENNAME2}}" ] ; then
          export ${{ secrets.TOKENNAME2}}=${{ secrets.TOKENVALUE2}}
        fi
        if [ "${{ secrets.TOKENNAME3}}" ] ; then
          export ${{ secrets.TOKENNAME3}}=${{ secrets.TOKENVALUE3}}
        fi
        if [ "${{ secrets.TOKENNAME4}}" ] ; then
          export ${{ secrets.TOKENNAME4}}=${{ secrets.TOKENVALUE4}}
        fi
        if [ "${{ secrets.TOKENNAME5}}" ] ; then
          export ${{ secrets.TOKENNAME5}}=${{ secrets.TOKENVALUE5}}
        fi
        cd ../acmetest
        ./letest.sh


